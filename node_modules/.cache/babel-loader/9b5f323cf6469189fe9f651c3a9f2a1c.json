{"ast":null,"code":"var _jsxFileName = \"/Users/kylechart/Desktop/Websites/ztmwd-smartbrain/src/App.js\";\nimport React, { Component } from 'react'; // Standard inporting for react apps, if using normal js, no need for Component, but if using new react js, It is needed \n\nimport Clarifai from 'clarifai';\nimport Navigation from './Components/Navigation/Navigation';\nimport Logo from './Components/Logo/Logo';\nimport ImageLinkForm from './Components/ImageLinkForm/ImageLinkForm';\nimport Rank from './Components/Rank/Rank';\nimport FaceRecognition from './Components/FaceRecognition/FaceRecognition';\nimport Particles from 'react-particles-js';\nimport './App.css';\nconst app = new Clarifai.App({\n  // This is telling the server that I am able to access the api with this key. Although not the same as every \n  apiKey: '46cd60645f2f41178e02fc35b1ad7ed7' // API It is very simaler to the rest, Each api has it own way of doing things, So just remember to read/follow\n\n}); // There instructions on the site, and you should have no problems\n\nconst particleOptions = {\n  // This is the particle effects on the background, It is fully customisable, link saved in dev space! Just adjust the \n  particles: {\n    // paramaters/numbers to change it! Everything explained on the website/git\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    // When using the constructor, you have to use super() to be able to access it, otherwise it will return an error\n    super(); // Constructors allow you to set props that can be handed inside of functions and down to certain elements.\n\n    this.calculateFaceLocation = data => {};\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      }); // When a new input is detected inside of the text area, this is telling it to display what the input instructions\n    };\n\n    this.helloThere = () => {\n      // Button - I had problems getting the button name to work from the lesson, So i winged it! As from what I can tell, the example is now part of keywords.\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input) // In here, you can change what model is being detected by clarifai, by just changing the model according to what the api offers\n      .then(response => this.calculateFaceLocation(response)) // This will now call the above function, which will find the required data, and produce an output\t\n      .catch(err => console.log('Error'));\n    };\n\n    this.state = {\n      input: '',\n      imageUrl: '',\n      // The image url state is being used as the source, to be able to display the image\n      box: [] // This constains the value's that we receive from the output, They are from the bounding_box we get below \n\n    };\n  }\n\n  //CLEAN VERSION\n  // helloThere = () => {\n  // \tthis.setState({imageUrl: this.state.input});\n  // \t\tapp.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input);\n  // \t\t.then(response => this.calculateFaceLocation.(response));\n  // \t\t.catch(err => console.log('Error'));\n  // }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(Particles, {\n      className: \"Particles1\",\n      params: particleOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(Navigation, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(Logo, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(Rank, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(ImageLinkForm, {\n      onInputChange: this.onInputChange,\n      helloThere: this.helloThere,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(FaceRecognition, {\n      imageUrl: this.state.imageUrl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 8\n      }\n    }));\n  }\n\n}\n\nexport default App; //  console.log(response.outputs[0].data.regions[0].region_info.bounding_box); // this is going into the output and selecting the specific information that we need\n// \tTo be able to add the face detection box.\n// For onInputChange to work, you have to use this. as it is a property of the app, otherwise it is undefined and will not register.\n// 90% of the styling in this app has been done with tachyons, this is an npm package, which is saved in my dev spave bookmarks which shows all the avalibale tags\n// Some has been self defined, and that means a css file has been made, and imported into the page\n// Calling setState() in React is asynchronous, for various reasons (mainly performance). Under the covers React will batch multiple calls to \n// setState() into a single call, and then re-render the component a single time, rather than re-rendering for every state change. Therefore the \n// imageUrl parameter would have never worked in our example, because when we called Clarifai with our the predict function, React wasn't finished \n// updating the state. \n// One way to go around this issue is to use a callback function:\n// setState(updater, callback)\n// Read more information here https://reactjs.org/docs/react-component.html#setstate\n// For deployment of react apps, you will need to use the npm build comand in the console! As this will compile all the nesecary files and dependencies \n// For the app to run, and it will do it in the most efficent way posisble!","map":{"version":3,"sources":["/Users/kylechart/Desktop/Websites/ztmwd-smartbrain/src/App.js"],"names":["React","Component","Clarifai","Navigation","Logo","ImageLinkForm","Rank","FaceRecognition","Particles","app","App","apiKey","particleOptions","particles","number","value","density","enable","value_area","constructor","calculateFaceLocation","data","onInputChange","event","setState","input","target","helloThere","imageUrl","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","console","log","box","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'; // Standard inporting for react apps, if using normal js, no need for Component, but if using new react js, It is needed \nimport Clarifai from 'clarifai';\nimport Navigation from './Components/Navigation/Navigation';\nimport Logo from './Components/Logo/Logo';\nimport ImageLinkForm from './Components/ImageLinkForm/ImageLinkForm';\nimport Rank from './Components/Rank/Rank'\nimport FaceRecognition from './Components/FaceRecognition/FaceRecognition';\nimport Particles from 'react-particles-js';\n\nimport './App.css';\n\nconst app = new Clarifai.App({ \t\t\t\t\t// This is telling the server that I am able to access the api with this key. Although not the same as every \n\tapiKey: '46cd60645f2f41178e02fc35b1ad7ed7'  // API It is very simaler to the rest, Each api has it own way of doing things, So just remember to read/follow\n})\t\t\t\t\t\t\t\t\t\t\t\t// There instructions on the site, and you should have no problems\n\nconst particleOptions = { // This is the particle effects on the background, It is fully customisable, link saved in dev space! Just adjust the \n\tparticles: {\t\t  // paramaters/numbers to change it! Everything explained on the website/git\n\t\tnumber: {\n\t\t\tvalue: 30,\n\t\tdensity: {\n\t\t\tenable: true,\n\t\t\tvalue_area: 800,\n\t\t}\n\t}\n}\n}\n\nclass App extends Component {\n\tconstructor() { // When using the constructor, you have to use super() to be able to access it, otherwise it will return an error\n\t\tsuper();\t// Constructors allow you to set props that can be handed inside of functions and down to certain elements.\n\t\tthis.state = {\n\t\t\tinput: '',\n\t\t\timageUrl: '', // The image url state is being used as the source, to be able to display the image\n\t\t\tbox: []\t// This constains the value's that we receive from the output, They are from the bounding_box we get below \n\t\t}\n\t} \n\ncalculateFaceLocation = (data) => {\n\n}\n\nonInputChange = (event) => {\n\tthis.setState({input: event.target.value}); // When a new input is detected inside of the text area, this is telling it to display what the input instructions\n}\t\t\t\t\t\t\t\t\t\t\t\t// in this case, its displaying an image. If we were just logging the event, we could detect anything inside\n\t\t\t\t\t\t\t\t\t\t\t\t// Of the input box, such as text! \n// To get the value of the input, you need to use the above code in the console.log paramaters\n\nhelloThere = () => { // Button - I had problems getting the button name to work from the lesson, So i winged it! As from what I can tell, the example is now part of keywords.\n\tthis.setState({imageUrl: this.state.input});\n\t\tapp.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input) // In here, you can change what model is being detected by clarifai, by just changing the model according to what the api offers\n\t\t.then(response => this.calculateFaceLocation(response))\t  // This will now call the above function, which will find the required data, and produce an output\t\n\t \t.catch(err => console.log('Error'))\n}\n//CLEAN VERSION\n\n// helloThere = () => {\n// \tthis.setState({imageUrl: this.state.input});\n// \t\tapp.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input);\n// \t\t.then(response => this.calculateFaceLocation.(response));\n// \t\t.catch(err => console.log('Error'));\n// }\n\nrender() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t <Particles className='Particles1' params={particleOptions}/> \n\t\t\t <Navigation />\n\t\t\t <Logo />\n\t\t\t <Rank />\n\t\t\t <ImageLinkForm onInputChange={this.onInputChange} helloThere={this.helloThere}/> \n\t\t     <FaceRecognition imageUrl={this.state.imageUrl}/>\n\t\t</div>\n\t);\n}\n}\n\nexport default App;\n \n//  console.log(response.outputs[0].data.regions[0].region_info.bounding_box); // this is going into the output and selecting the specific information that we need\n// \tTo be able to add the face detection box.\n\n// For onInputChange to work, you have to use this. as it is a property of the app, otherwise it is undefined and will not register.\n// 90% of the styling in this app has been done with tachyons, this is an npm package, which is saved in my dev spave bookmarks which shows all the avalibale tags\n// Some has been self defined, and that means a css file has been made, and imported into the page\n\n// Calling setState() in React is asynchronous, for various reasons (mainly performance). Under the covers React will batch multiple calls to \n// setState() into a single call, and then re-render the component a single time, rather than re-rendering for every state change. Therefore the \n// imageUrl parameter would have never worked in our example, because when we called Clarifai with our the predict function, React wasn't finished \n// updating the state. \n\n// One way to go around this issue is to use a callback function:\n// setState(updater, callback)\n\n// Read more information here https://reactjs.org/docs/react-component.html#setstate\n\n// For deployment of react apps, you will need to use the npm build comand in the console! As this will compile all the nesecary files and dependencies \n// For the app to run, and it will do it in the most efficent way posisble!\n\n\n"]},"metadata":{},"sourceType":"module"}